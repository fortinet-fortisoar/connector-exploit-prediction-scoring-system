"""
This file will be auto-generated on each "new operation action", so avoid editing in this file.
"""
from .constants import *
from requests import request
import json
import datetime
import re
from connectors.core.connector import get_logger, ConnectorError

logger = get_logger("exploit-prediction-scoring-system")


class EPSS():

    def __init__(self) -> None:
        pass

    def get_params(self, params):
        params_data = {}
        if params['orderResult']:
            params_data['order'] = self.get_order_data(params)
        if 'byDate' in params.keys() and params['byDate'] is not None:
            params_data['date'] = self.get_formatted_date(params)
        if 'scope' in params.keys():
            params_data['scope'] = SCOPE_MAP.get(params['scope'])
        for k, v in params.items():
            if k in PARAMS_KEY:
                if v is not None and v != '':
                    if k == 'cve':
                        if isinstance(params['cve'], list):
                            params_data['cve'] = ",".join(v)
                        elif isinstance(params['cve'], str):
                            params_data['cve'] = v
                        continue
                    else:
                        params_data[k] = v
        return params_data

    def get_order_data(self, params):
        order_in = ORDER_MAP.get('type').get(params['orderIn'])
        return '{0}'.format(order_in) + str(ORDER_MAP.get('field').get(params['orderField']))

    def get_formatted_date(self, params):
        date = params['byDate']
        pattern = r'^\d{4}-\d{2}-\d{2}T'
        if isinstance(date, int):
            date = datetime.datetime.fromtimestamp(date).strftime("%Y-%m-%d")
        elif re.match(pattern, date):
            date = datetime.datetime.strptime(
                date, "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%Y-%m-%d")
        return date

    def make_rest_api_call(self, method, params):
        return request(method=method, url=EPSS_API, params=params)


def get_epss_score(config, params):
    try:
        epss_obj = EPSS()
        params_data = epss_obj.get_params(params)
        response = epss_obj.make_rest_api_call('GET', params_data)
        return json.loads(response.text)
    except Exception as err:
        logger.exception(str(err))
        raise ConnectorError(err)


def get_epss_score_by_cve_id(config, params):
    try:
        epss_obj = EPSS()
        params_data = epss_obj.get_params(params)
        response = epss_obj.make_rest_api_call('GET', params_data)
        return json.loads(response.text)
    except Exception as err:
        logger.exception(str(err))
        raise ConnectorError(err)


operations = {'get_epss_score': get_epss_score,
              'get_epss_score_by_cve_id': get_epss_score_by_cve_id}
